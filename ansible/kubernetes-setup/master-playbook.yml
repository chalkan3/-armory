- hosts: all
  become: true
  tasks:
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

    - name: Share /sys/fs
      command: mount --make-rshared /sys/fs

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu xenial stable
        state: present
        update_cache: true
 
    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker

    - name: Enable Docker
      command: systemctl enable docker   

    - name: Reload Docker
      command: systemctl daemon-reload 

    - name: Restart Docker
      command: systemctl restart docker 

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet=1.23.0-00
          - kubeadm=1.23.0-00
          - kubectl=1.23.0-00

    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }} --fail-swap-on=false
        create: yes

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Cluster Config
      shell: |
        cat > /root/kubeadm-config.yml <<EOF
        apiVersion: kubeadm.k8s.io/v1beta2
        kind: ClusterConfiguration
        kubernetesVersion: stable
        controlPlaneEndpoint: "{{ ha_ip }}:6443"
        networking:
          podSubnet: "192.168.0.0/16"

        ---
        apiVersion: kubeadm.k8s.io/v1beta2
        kind: InitConfiguration
        localAPIEndpoint:
          advertiseAddress: "{{ node_ip }}"
          bindPort: 6443
        EOF

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --config '/root/kubeadm-config.yml' --upload-certs --ignore-preflight-errors Swap
      register: join_m
     
    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join workers command to local file
      local_action: copy content="{{ join_command.stdout_lines[0] + ' --ignore-preflight-errors Swap'}}" dest="./join/join"
      become: false

    - name: Get KUBECONFIG 
      shell: cat /etc/kubernetes/admin.conf
      register: kubeconfig

    - name: Copy kubeconfig to local
      local_action: copy content="{{ kubeconfig.stdout }}" dest="./kubeconfig/config"
      become: false
  
    - name: Copy join master command to local file
      local_action: copy content="{{ (''.join((join_m.stdout_lines[72], join_m.stdout_lines[73] , join_m.stdout_lines[74], ' --ignore-preflight-errors Swap'))) | regex_replace('[\\r\\n\\t\\\\]+', '')  }}" dest="./join_master/join"
      become: false

    - name: Setup kubeconfig for vagrant user
      command: "{{ item }}"
      with_items:
      - mkdir -p /home/vagrant/.kube
      - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      - chown vagrant:vagrant /home/vagrant/.kube/config

    - name: Setup IP table
      command: sysctl net.bridge.bridge-nf-call-iptables=1

    - name: Download Core DNS config file
      copy: src=COREDNS/coredns_config.yaml dest=/tmp/coredns_config.yaml mode=0777

    - name: Replace Core DNS forwarding
      shell: | 
        export KUBECONFIG=/etc/kubernetes/admin.conf && kubectl replace -n kube-system -f /tmp/coredns_config.yaml

    - name: Copy Calico
      copy: src=cni/calico.yaml dest=/tmp/calico.yaml mode=0777
    
    - name: Install CNI
      shell: | 
        export KUBECONFIG=/etc/kubernetes/admin.conf && kubectl create -f /tmp/calico.yaml


    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted
     
  handlers:
    - name: docker status
      service: name=docker state=started
